/** 
* This template file was generated by the bifrost-sdk.
* Edit the init and update functions to create business logic
for your module. 
*/ 
import  { 
    DataFrame, 
    TModuleContext, 
    TState,
    Log
        } from 'bifrost-zero-common'
import  { 
    localStorageType,
    TYPEID, 
        } from './src/types.js'
import  { BifrostZeroModule } from 'bifrost-zero-sdk'
import  { 
    CHARGING_STATION_POWER_MAPPING,
    PV_SYSTEM_POWER_MAPPING,
    sensorDirections,
    sensorNames, 
    TYPEID_LOCAL 
        } from './data/fragment/local_types.js'
import * as fs from 'fs'
import csv from 'csv-parser'

async function readCSVtoDict(filePath: string): Promise<{ [key: string]: any }> {
    return new Promise((resolve, reject) => {
        fs.createReadStream(filePath)
            .pipe(csv({separator: ";", }))
            .on('data', (row) => {
                const timestamp = row.Time;
                const [hours, minutes, seconds] = timestamp.split(':').map(Number);
                delete row.Time; // Remove the timestamp column from the row object
                const convertedTs = hours*3600 + minutes*60 + seconds
                const numericRow: Record<string, number> = {};
                Object.keys(row).forEach(key => {
                numericRow[key] = parseFloat(row[key]);
                if (isNaN(numericRow[key])) {
                    numericRow[key] = 0; // or any default value, or keep as null/undefined
                }
                });
                csvData[convertedTs] = numericRow;
            })
            .on('end', () => {
                resolve(csvData);
            })
            .on('error', (err) => {
                reject(err);
            });
    });
}

const localStorage : localStorageType = {}
const csvData: { [key: string]: any } = {};

const logic = { 

    initFn: (storyId: string, experimentId: string, state: TState, context: TModuleContext) => { 
        
        context.log.write(`Init from [${storyId}/${experimentId}]`)
        
        // initialize the result DataFrame of the init function
        const initResult: DataFrame = new DataFrame()
        initResult.setTime(0)
        
        // initialize the local storage for this experiment
        localStorage[experimentId] = {
            lastUpdate     : -1,
            numberUpdate   : 0,
            allPGCs        : [],
            byPGC          : {},
            allGridSensors : [],
            byGridSensor   : {}
        }	
        try {
            for (const structureId of state.structures.ids){
                const entity = state.structures.entities[structureId]
                if(entity.experimentId === experimentId){
                                    
                    // get all needed information for the power grid connectors
                    if(entity.typeId === TYPEID.PGC){
                        localStorage[experimentId].allPGCs.push(structureId)
                        localStorage[experimentId].byPGC[structureId] = {
                            pgcApId   : "",
                            pvApId    : "",
                            pvMaxApId : "",
                            load      : {
                                scaleFactor : 1
                            },
                            solarSystem : {
                                scaleFactor : 1
                            },
                            evApId    : "",
                            evMaxApId : "",
                            evCharger : {
                                chargingSlots   : 1,
                                maxPowerPerSlot : 4,
                                shiftedEnergy   : 0
                            }
                        }
                        
                        // get apId of pgc
                        const pgcDynIds:string[] = entity.dynamicIds
                        for (const dynId of pgcDynIds){
                            if (state.dynamics.entities[dynId].typeId == TYPEID.ACTIVE_POWER){
                                localStorage[experimentId].byPGC[structureId].pgcApId = dynId
                            }
                        }
                        
                        // got through the childs
                        const pgcChildIds:string[] = entity.childIds
                        for (const childId of pgcChildIds){
                            const dynIds = state.structures.entities[childId]?.dynamicIds
                            if (dynIds === undefined){
                                continue
                            }
                            if (state.structures.entities[childId].typeId == TYPEID_LOCAL.SOLAR_PANEL){
                                for (const dynId of dynIds){
                                    if (state.dynamics.entities[dynId].typeId == TYPEID_LOCAL.PV_SYSTEM_POWER){
                                        localStorage[experimentId].byPGC[structureId].pvApId = dynId
                                    }
                                    if (state.dynamics.entities[dynId].typeId == TYPEID_LOCAL.PV_SYSTEM_MAX_POWER){
                                        localStorage[experimentId].byPGC[structureId].pvMaxApId = dynId
                                    }
                                }
                            } else if (state.structures.entities[childId].typeId == TYPEID_LOCAL.CHARGING_POLE){
                                for (const dynId of dynIds){
                                    if (state.dynamics.entities[dynId].typeId == TYPEID_LOCAL.CHGSTATION_POWER){
                                        localStorage[experimentId].byPGC[structureId].evApId = dynId
                                    }
                                    if (state.dynamics.entities[dynId].typeId == TYPEID_LOCAL.CHGSTATION_MAX_POWER){
                                        localStorage[experimentId].byPGC[structureId].evMaxApId = dynId
                                    }
                                }
                            }
                        }

                        // go throught the parents
                        const pgcParentIds:string[] = entity.parentIds
                        for (const parentId of pgcParentIds){
                            // identfiy Solar-Farms
                            if (state.structures.entities[parentId].typeId == TYPEID_LOCAL.SOLAR_FARM){
                                // set the scaleFactor for the solar system simulator to a higher value
                                localStorage[experimentId].byPGC[structureId].solarSystem.scaleFactor = 8
                                // switch off the load simulator for the solar farm
                                localStorage[experimentId].byPGC[structureId].load.scaleFactor = 0
                            }
                            // identify EV-Station
                            if (state.structures.entities[parentId].typeId == TYPEID_LOCAL.EV_STATION){
                                // set the scaleFactor for the EV-Charger simulator to a higher value
                                localStorage[experimentId].byPGC[structureId].evCharger.chargingSlots = 3
                                //switch off the load simulator for the EV-Station
                                localStorage[experimentId].byPGC[structureId].load.scaleFactor = 0
                            }
                        }
                    }

                    // get all needed information for the grid sensors
                    if(entity.typeId === TYPEID_LOCAL.GRID_SENSOR){
                        localStorage[experimentId].allGridSensors.push(structureId)
                        localStorage[experimentId].byGridSensor[structureId] = {
                            nameId               : "",
                            isActive             : true,
                            cablePowerId         : "",
                            powerFlowDirectionId : "",
                            powerMeasurementId   : "",
                            powerLimitId         : ""
                        }
                        // get the sensor dynamicIds
                        const gridDynIds:string[] = entity.dynamicIds
                        for (const dynId of gridDynIds){
                            if (state.dynamics.entities[dynId].typeId == TYPEID_LOCAL.GRID_SENSOR_NAME){
                                localStorage[experimentId].byGridSensor[structureId].nameId = dynId
                            } else if (state.dynamics.entities[dynId].typeId == TYPEID_LOCAL.GRID_SENSOR_DIRECTION){
                                localStorage[experimentId].byGridSensor[structureId].powerFlowDirectionId = dynId
                            } else if (state.dynamics.entities[dynId].typeId == TYPEID_LOCAL.GRID_SENSOR_POWERMEASUREMENT){
                                localStorage[experimentId].byGridSensor[structureId].powerMeasurementId = dynId
                            } else if (state.dynamics.entities[dynId].typeId == TYPEID_LOCAL.GRID_SENSOR_POWERLIMIT){
                                localStorage[experimentId].byGridSensor[structureId].powerLimitId = dynId
                            }
                        }
                        // get now the dynamics of the needed values for calculation of the sensor measurements
                        const parentIds:string[] = entity.parentIds
                        for (const parentId of parentIds){
                            if (state.structures.entities[parentId].typeId == TYPEID.NODE){
                                const nodeEntity = state.structures.entities[parentId]
                                // get the childs of the node
                                const nodeChildIds:string[] = nodeEntity.childIds
                                let cableCounter = 0
                                for (const childId of nodeChildIds){
                                    // skip non connnection entities
                                    if (state.connections.entities[childId] === undefined){
                                        continue
                                    }
                                    if (state.connections.entities[childId].typeId == TYPEID.CABLE){
                                        cableCounter++
                                        if (cableCounter > 2){
                                            // more than 2 cables connected to the node
                                            context.log.write(`Error: More than 2 cables connected to the node ${parentId}`, Log.level.ERROR)
                                            context.log.write(`Sensor ${localStorage[experimentId].byGridSensor[structureId].nameId} set to inactive`, Log.level.INFO)
                                            // set this sensor to inactive
                                            localStorage[experimentId].byGridSensor[structureId].isActive = false
                                            // set the sensor name to "Inactive"
                                            initResult.addSeries({dynamicId:localStorage[experimentId].byGridSensor[structureId].nameId,values:[sensorNames.INACTIVE]})
                                            continue
                                        }
                                        if (cableCounter > 1){
                                            continue
                                        }
                                        // get the cable current id of the cable
                                        const cableEntity = state.connections.entities[childId]
                                        const cableDynIds:string[] = cableEntity.dynamicIds
                                        for (const cableDynId of cableDynIds){
                                            if (state.dynamics.entities[cableDynId].typeId == TYPEID.CABLE_POWER){
                                                localStorage[experimentId].byGridSensor[structureId].cablePowerId = cableDynId
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (error) {
            context.log.write(`Error in init ${error}`, Log.level.ERROR)
        }
        
        return initResult
    },

    updateFn: (storyId: string, experimentId: string, startAt:number, simulationAt: number, replayAt: number, data: DataFrame, context: TModuleContext) => {
        context.log.write(`Update from [${storyId}/${experimentId}] @ ${simulationAt}`)
        // extract subscriptionData out of dataFrame
        var dynamicsById = {}
        if(!data.isEmpty()){
            for (const dynamicObj of data.series) {
                dynamicsById[dynamicObj.dynamicId] = dynamicObj.values[0]
            }
        }
        const result: DataFrame = new DataFrame()
        result.setTime(simulationAt)
        if (localStorage[experimentId].lastUpdate !== simulationAt){
            localStorage[experimentId].lastUpdate = simulationAt
            localStorage[experimentId].numberUpdate = 1
        } else {
            localStorage[experimentId].numberUpdate += 1
        }
        
        try {
            // update asset values
            if (localStorage[experimentId].numberUpdate == 1){
                let   wData = {};
                //  time modulo so day repeats
                const dataTime = (startAt + simulationAt) % 86400
                // check if the dataTime is in the csvData
                if (!csvData.hasOwnProperty(dataTime)) {
                    // if not, make a linear interpolation
                    const keys = Object.keys(csvData).map(Number).sort((a, b) => a - b);
                    let lowerKey = keys[0];
                    let upperKey = keys[keys.length - 1];
                    for (let i = 0; i < keys.length; i++) {
                        if (keys[i] <= dataTime) {
                            lowerKey = keys[i];
                        }
                        if (keys[i] > dataTime) {
                            upperKey = keys[i];
                            break;
                        }
                    }
                    if (lowerKey === undefined || upperKey === undefined) {
                        context.log.write(`No data available for time ${dataTime}`, Log.level.WARNING);
                        return result; // No data available for this time
                    }
                    // perform linear interpolation
                    const lowerData = csvData[lowerKey];
                    const upperData = csvData[upperKey];
                    const interpolationFactor = (dataTime - lowerKey) / (upperKey - lowerKey);
                    for (const key in lowerData) {
                        if (lowerData.hasOwnProperty(key) && upperData.hasOwnProperty(key)) {
                            wData[key] = lowerData[key] + interpolationFactor * (upperData[key] - lowerData[key]);
                        }
                    }
                } else {
                    wData = csvData[dataTime]
                }
                
                // check, if summer or winter
                let SW = ""
                if (startAt > 6739200 && startAt < 22809600){
                    SW = "S"
                }else{
                    SW = "W"
                }
                
                for (const pgcId of localStorage[experimentId].allPGCs){
                    const pStruct = localStorage[experimentId].byPGC[pgcId]
                    let sumLoad = 0
                    
                    // add load power
                    let loadPowerResult = wData["LD-"+SW] * pStruct.load.scaleFactor
                    sumLoad += loadPowerResult
                    
                    // add PV power
                    if(pStruct.pvApId){
                        let pvInfeedResult    = [0, 0]
                        let pvInfeedPotential = wData["PV-"+SW] * pStruct.solarSystem.scaleFactor
                        let pvInfeedActual    = pvInfeedPotential
                        
                        if (-pvInfeedPotential > dynamicsById[pStruct.pvMaxApId]){
                            pvInfeedActual = -dynamicsById[pStruct.pvMaxApId]
                        }
                        // write the values to the result DataFrame
                        pvInfeedResult[PV_SYSTEM_POWER_MAPPING.Infeed_Potential] = -pvInfeedPotential
                        pvInfeedResult[PV_SYSTEM_POWER_MAPPING.Actual_Infeed]    = -pvInfeedActual
                        result.addSeries({dynamicId:pStruct.pvApId,values:[pvInfeedResult]})
                        sumLoad += pvInfeedActual
                    }

                    // add EV charging power
                    if(pStruct.evApId){
                        let chgPowerResult  = [0, 0]
                        let chgPowerDemand  = 0
                        let chgPowerActual  = 0
                        let chgPowerShifted = 0
                        let chgPowerLimit   = 0

                        // calculate the charging power of each of the charging slots
                        for (let i = 0; i < pStruct.evCharger.chargingSlots; i++){
                            chgPowerDemand  += wData["EV"]
                            chgPowerShifted += wData["EV"]
                            chgPowerLimit   += pStruct.evCharger.maxPowerPerSlot
                        }

                        if (pStruct.evCharger.shiftedEnergy > 0){
                            let newChgPower = chgPowerShifted + pStruct.evCharger.shiftedEnergy
                            if (newChgPower > chgPowerLimit){
                                newChgPower = chgPowerLimit
                            } 

                            pStruct.evCharger.shiftedEnergy = pStruct.evCharger.shiftedEnergy - (newChgPower - chgPowerShifted)
                            chgPowerShifted = newChgPower
                        
                        }
                        // check if the resulting charging power is higher than the max power of the charging station
                        let chgPowerSetPoint = dynamicsById[pStruct.evMaxApId]
                        if (chgPowerShifted > chgPowerSetPoint){
                            chgPowerActual = chgPowerSetPoint
                            pStruct.evCharger.shiftedEnergy += chgPowerShifted - chgPowerSetPoint
                        } else {
                            chgPowerActual = chgPowerShifted
                        }

                        chgPowerResult[CHARGING_STATION_POWER_MAPPING.Power_Demand]   = chgPowerDemand
                        chgPowerResult[CHARGING_STATION_POWER_MAPPING.Actual_Power]   = chgPowerActual
                        chgPowerResult[CHARGING_STATION_POWER_MAPPING.Shifted_Demand] = chgPowerShifted
                        result.addSeries({dynamicId:pStruct.evApId,values:[chgPowerResult]})
                        sumLoad += chgPowerActual
                    }
                    
                    // calculate the resulting load value
                    const resultLoad = (sumLoad/3)
                    result.addSeries({dynamicId:pStruct.pgcApId,values:[[resultLoad,resultLoad,resultLoad]]})
                }
            }
            
            // update the grid sensor values
            if (localStorage[experimentId].numberUpdate == 2){
                for (const sensorId of localStorage[experimentId].allGridSensors){
                    const sStruct = localStorage[experimentId].byGridSensor[sensorId]
                    
                    // if sensor is conected to more than 2 cables, then skip this sensor
                    if (!sStruct.isActive){
                        // set the sensor name to "Inactive"
                        result.addSeries({dynamicId:sStruct.nameId,values:[sensorNames.INACTIVE]})
                        result.addSeries({dynamicId:sStruct.powerMeasurementId,values:[0]})
                        continue
                    }
                    
                    // get the value of the sensor name
                    const sensorName = dynamicsById[sStruct.nameId]
                    if (sensorName == sensorNames.INACTIVE){
                        result.addSeries({dynamicId:sStruct.powerMeasurementId,values:[0]})
                        continue
                    } else { 
                        const cablePower = dynamicsById[sStruct.cablePowerId]
                        
                        // get the power flow scaling factor, which is -1 if powerFlowDirection is "DOWN" and 1 if it is "UP"
                        const powerFlowDirection = dynamicsById[sStruct.powerFlowDirectionId]
                        let powerFlowScalingFactor = 1
                        if (powerFlowDirection === sensorDirections.DOWN){ 
                            powerFlowScalingFactor = -1
                        }
                        
                        // calculate the power value 
                        const measuredPower = powerFlowScalingFactor * (
                                            cablePower[0] + 
                                            cablePower[1] + 
                                            cablePower[2] ) / 3
                        // write the sensor value
                        result.addSeries({dynamicId:sStruct.powerMeasurementId,values:[measuredPower]})
                    } 
                }
            }
            
        } catch (error) {
            context.log.write(`Error: ${error}`, Log.level.ERROR)
        }
        
        return result
    }
}

const m = new BifrostZeroModule({
    author         : 'anonymous',
    label          : 'OpenSwarm Asset Simulator',
    about          : 'Module to simulate assest in OpenSwarm PoC1.',
    initCallback   : logic.initFn,
    updateCallback : logic.updateFn,
    fragmentFile   : './data/fragment/Module.Fragment.yaml',
    subscriptions  : [
        TYPEID.CABLE_POWER,
        TYPEID_LOCAL.CHGSTATION_MAX_POWER,
        TYPEID_LOCAL.PV_SYSTEM_MAX_POWER,
        TYPEID_LOCAL.GRID_SENSOR_DIRECTION,
        TYPEID_LOCAL.GRID_SENSOR_NAME
    ],
    samplingRate   : process.env.SAMPLING_RATE ? Number(process.env.SAMPLING_RATE) : 60,
    docURL         : '',
    moduleURL      : process.env.MODULE_URL  || 'http://localhost:1808',
    bifrostURL     : process.env.BIFROST_URL || 'http://localhost:9091',
    hook           : process.env.HOOK ? JSON.parse(process.env.HOOK) : [100, 910]
})

const csvFilePath = 'data/csv/profile-data.csv';
readCSVtoDict(csvFilePath)
    .then(() => {
        m.context.log.write("Data loaded");
    })
    .catch((error) => {
        m.context.log.write('Error reading CSV:', error);
    });

m.start()