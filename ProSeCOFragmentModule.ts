/** 
* This template file was generated by the bifrost-sdk.
* Edit the init and update functions to create business logic
for your module. 
*/ 
import  { 
    DataFrame, 
    TModuleContext, 
    TState 
        } from 'bifrost-zero-common'
import  { 
    localStorageType, 
        } from './src/types.js';
import  { BifrostZeroModule } from 'bifrost-zero-sdk'
import  { TYPEID_LOCAL } from './data/fragment/local_types.js';

const localStorage : localStorageType = {}

const logic = { 


    initFn: (storyId: string, experimentId: string, state: TState, context: TModuleContext) => { 
        
        context.log.write(`Init from [${storyId}/${experimentId}]`)
        
        // initialize the local storage for this experiment
        localStorage[experimentId] = {}	
        
        return new DataFrame()
    },

    updateFn: (storyId: string, experimentId: string, startAt:number, simulationAt: number, replayAt: number, data: DataFrame, context: TModuleContext) => {
        
        context.log.write(`\nUpdate from [${storyId}/${experimentId}] @ ${simulationAt}`)
        
        const result: DataFrame = new DataFrame()
        result.setTime(simulationAt)
        
        return result
    }
}

const m = new BifrostZeroModule({
    author         : 'anonymous',
    label          : 'ProSeCO Fragment Module',
    about          : 'Module to provide the needed fragments for the ProSeCO scenarios.',
    initCallback   : logic.initFn,
    updateCallback : logic.updateFn,
    fragmentFile   : './data/fragment/ProSeCO.Fragment.yaml',
    subscriptions  : [
        TYPEID_LOCAL.FLOW_REVENUE, TYPEID_LOCAL.FLOW_ENERGY, TYPEID_LOCAL.FLOW_PEOPLE
    ],
    samplingRate   : 900,
    docURL         : '',
    moduleURL      : process.env.MODULE_URL  || 'http://localhost:1809',
    bifrostURL     : process.env.BIFROST_URL || 'http://localhost:9091',
    hook           : [100]
})
m.start()